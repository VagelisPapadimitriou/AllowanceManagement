// <auto-generated />
using System;
using AllowanceManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AllowanceManagement.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240720203106_RelationsSeedCRUD")]
    partial class RelationsSeedCRUD
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AllowanceManagement.Models.CategoryPercentage", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("CategoryId");

                    b.ToTable("CategoryPercentages");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Category = "Α",
                            Description = "100% του αρχικού ποσού για στελέχη με κύρια τοποθέτηση σε Φ/Γ, Υ/Β, Τ/ΠΚ και Κ/Φ",
                            Percentage = 1.00m
                        },
                        new
                        {
                            CategoryId = 2,
                            Category = "Β",
                            Description = "85% του αρχικού ποσού για στελέχη με κύρια τοποθέτηση σε Α/Γ, ΠΓΥ, Ν/ΘΗ και ΠΠ",
                            Percentage = 0.85m
                        },
                        new
                        {
                            CategoryId = 3,
                            Category = "Γ",
                            Description = "70% του αρχικού ποσού για στελέχη με κύρια τοποθέτηση σε ΠΤΜ, ΣΑΠ, Π/Φ, Υ/Φ, Υ/Γ, Υ/Γ-Ω/Κ και ΠΑΤ.",
                            Percentage = 0.70m
                        },
                        new
                        {
                            CategoryId = 4,
                            Category = "Δ",
                            Description = "50% του αρχικού ποσού σε στελέχη με κύρια τοποθέτηση στη Διεύθυνση ΑΣ/ΔΕΠΑ",
                            Percentage = 0.50m
                        });
                });

            modelBuilder.Entity("AllowanceManagement.Models.Employee", b =>
                {
                    b.Property<string>("AM")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RankAmountId")
                        .HasColumnType("int");

                    b.Property<int>("SeaDay")
                        .HasColumnType("int");

                    b.HasKey("AM");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RankAmountId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("AllowanceManagement.Models.RankAmount", b =>
                {
                    b.Property<int>("RankAmountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RankAmountId"));

                    b.Property<decimal>("BaseAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Duty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RankAmountId");

                    b.ToTable("RankAmounts");

                    b.HasData(
                        new
                        {
                            RankAmountId = 1,
                            BaseAmount = 1015.00m,
                            Duty = "Κυβερνήτης",
                            Rank = "Πλοίαρχος/Αντιπλοίαρχος"
                        },
                        new
                        {
                            RankAmountId = 2,
                            BaseAmount = 1015.00m,
                            Duty = "-",
                            Rank = "Διευθυντής ΑΣ/ΔΕΠΑ"
                        },
                        new
                        {
                            RankAmountId = 3,
                            BaseAmount = 765.00m,
                            Duty = "Κυβερνήτης",
                            Rank = "Πλωτάρχης"
                        },
                        new
                        {
                            RankAmountId = 4,
                            BaseAmount = 600.00m,
                            Duty = "Κυβερνήτης",
                            Rank = "Υποπλοίαρχος/Ανθυποπλοίαρχος/Σημαιοφόρος"
                        },
                        new
                        {
                            RankAmountId = 5,
                            BaseAmount = 670.00m,
                            Duty = "Υ/Αος",
                            Rank = "Ανώτερος Αξιωματικός"
                        },
                        new
                        {
                            RankAmountId = 6,
                            BaseAmount = 600.00m,
                            Duty = "-",
                            Rank = "Ανώτερος Αξιωματικός"
                        },
                        new
                        {
                            RankAmountId = 7,
                            BaseAmount = 535.00m,
                            Duty = "-",
                            Rank = "Υποπλοίαρχος/Ανθυποπλοίαρχος"
                        },
                        new
                        {
                            RankAmountId = 8,
                            BaseAmount = 510.00m,
                            Duty = "-",
                            Rank = "Σημαιοφόρος/Ανθυπασπιστής"
                        },
                        new
                        {
                            RankAmountId = 9,
                            BaseAmount = 470.00m,
                            Duty = "-",
                            Rank = "Αρχικελευστής"
                        },
                        new
                        {
                            RankAmountId = 10,
                            BaseAmount = 440.00m,
                            Duty = "-",
                            Rank = "Επικελευστής"
                        },
                        new
                        {
                            RankAmountId = 11,
                            BaseAmount = 400.00m,
                            Duty = "-",
                            Rank = "Κελευστής/Δίοπος"
                        },
                        new
                        {
                            RankAmountId = 12,
                            BaseAmount = 385.00m,
                            Duty = "-",
                            Rank = "ΕΠΟΠ Ναύτης/ΟΒΑ"
                        });
                });

            modelBuilder.Entity("AllowanceManagement.Models.UploadedFile", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FileId");

                    b.ToTable("UploadedFiles");
                });

            modelBuilder.Entity("AllowanceManagement.Models.Employee", b =>
                {
                    b.HasOne("AllowanceManagement.Models.CategoryPercentage", "CategoryPercentage")
                        .WithMany("Employees")
                        .HasForeignKey("CategoryId");

                    b.HasOne("AllowanceManagement.Models.RankAmount", "RankAmount")
                        .WithMany("Employees")
                        .HasForeignKey("RankAmountId");

                    b.Navigation("CategoryPercentage");

                    b.Navigation("RankAmount");
                });

            modelBuilder.Entity("AllowanceManagement.Models.CategoryPercentage", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("AllowanceManagement.Models.RankAmount", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
